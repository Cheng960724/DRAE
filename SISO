
import statsmodels.tsa.stattools as ts
from keras.layers import Bidirectional,LSTM
import warnings
from scipy.spatial.distance import squareform, pdist, cdist
from matplotlib.patches import Ellipse
from scipy import stats
from scipy.stats import kde
from scipy.integrate import tplquad,dblquad,quad
warnings.filterwarnings('ignore')
import tensorflow as tf
import matplotlib.pyplot as plt  
from keras.models import Sequential
from sklearn import preprocessing
# tf.enable_eager_execution()
import numpy as np
import pandas as pd
from math import sqrt
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from matplotlib.patches import Ellipse, Circle
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers

################################################非平稳模拟信号
t = []
for i in range(1,2001):
    t.append(i)

n1 = np.random.normal(0,0.1,2000)
n2 = np.random.normal(0,0.1,2000)

x1 = np.sin(0.01*np.array(t)) + n1
ts.adfuller(x1, 1)
plt.plot(x1)
x=[]
x0 = 0
for i in range(2000):
    xt = 0.1 * x0 + 2 * x1[i]
    x.append(xt)
    x0 = xt
fault = []
for i in range(1000):
    fault.append(0)
for i in range(1000,1100):
    fault.append(-0.6-0.004*(i-1000))
for i in range(1100,1180):
    fault.append(-1)
for i in range(1180,1280):
    fault.append(-1+0.004*(i-1180))
for i in range(1280,2000):
    fault.append(0)
x2 = np.array(x) ** 2 + n2 + fault
    
data1 = np.vstack((x1,x2)).T

p_value=[]
for i in range(len(data1.T)):
    p_value.append(ts.adfuller(data1[:,i], 1))

plt.subplot(311)
plt.title('Input')
plt.plot(x1,c='b',label='')
plt.ylabel('${{x}_{i}}$',fontsize=15)
plt.tight_layout()
plt.legend(frameon=False)
plt.vlines(1000,np.min(x1)-0.5,np.max(x1)+0.5,color='black',linestyle='--',linewidth=3)
plt.vlines(1280,np.min(x1)-0.5,np.max(x1)+0.5,color='black',linestyle='--',linewidth=3)
plt.subplot(312)
plt.title('Output')
plt.plot(x2,c='b')
plt.ylabel('${{y}_{i}}$',fontsize=15)
plt.tight_layout()
plt.legend(frameon=False)
plt.vlines(1000,np.min(x2)-0.5,np.max(x2)+0.5,color='black',linestyle='--',linewidth=3)
plt.vlines(1280,np.min(x2)-0.5,np.max(x2)+0.5,color='black',linestyle='--',linewidth=3)
plt.subplot(313)
plt.title('Fault')
plt.plot(fault,c='b')
plt.ylabel('${{f}_{i}}$',fontsize=15)
plt.tight_layout()
plt.xlabel('i',fontsize=15)
plt.legend(frameon=False)
plt.show()
plt.vlines(1000,np.min(fault)-0.5,np.max(fault)+0.5,color='black',linestyle='--',linewidth=3)
plt.vlines(1280,np.min(fault)-0.5,np.max(fault)+0.5,color='black',linestyle='--',linewidth=3)
